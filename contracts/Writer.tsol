pragma ever-solidity >= 0.61.2;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

struct PostSuggestion {
    string ipfsAddress;
    uint128 amount;
    address sender;
}

contract Writer {
    address static ownerAddr;
    uint256 static ownerPubKey;
    uint128 static minValue;
    uint128 static tip;
    uint128 static postKey;
    uint static _nonce;

    string[] state;
    mapping(uint128 => PostSuggestion) postSuggestions;

    event StateChange(string[] _state);
    event PostSuggested(uint128 _postKey, PostSuggestion _postSuggestion);

    constructor() public {
        tvm.accept();
        string[] initialState;

        setState(initialState);
    }

    function setState(string[] _state) private {
        state = _state;

        emit StateChange(_state);
    }

    function addPost(string post) public externalMsg {
        require(msg.pubkey() == ownerPubKey, 101);
        tvm.accept();

        string[] _state = state;
        _state.push(post);
        setState(_state);

        emit StateChange(state);
    }

    function getDetails()
        external
        view
    returns (
        string[] _state
    ) {
        return state;
    }

    function suggestPost(string ipfsAddress) public internalMsg {
        require(msg.value >= minValue, 102);
        PostSuggestion ps = PostSuggestion(ipfsAddress, msg.value, msg.sender);

        postSuggestions[postKey] = ps;
        postKey += 1;

        emit PostSuggested(postKey, ps);
    }

    function acceptPost(uint128 _postKey) public externalMsg {
        require(msg.pubkey() == ownerPubKey, 101);
        tvm.accept();

        optional(PostSuggestion) ps = postSuggestions.fetch(_postKey);
        require(ps.hasValue(), 404);
        
        PostSuggestion postSuggestion = ps.get();
        addPost(postSuggestion.ipfsAddress);
        ownerAddr.transfer(postSuggestion.amount);

        delete postSuggestions[_postKey];
    }

    function rejectPost(uint128 _postKey) public externalMsg {
        require(msg.pubkey() == ownerPubKey, 101);
        tvm.accept();

        optional(PostSuggestion) ps = postSuggestions.fetch(_postKey);
        require(ps.hasValue(), 404);
        
        PostSuggestion postSuggestion = ps.get();

        ownerAddr.transfer(tip);
        postSuggestion.sender.transfer(postSuggestion.amount - tip);

        delete postSuggestions[_postKey];
    }

    function getPostSuggestions()
        external
        view
    returns (
        mapping(uint128 => PostSuggestion) _postSuggestions
    ) {
        return postSuggestions;
    }
}
